import * as React from 'react';
import Card from '@mui/material/Card';
import CardActions from '@mui/material/CardActions';
import CardContent from '@mui/material/CardContent';
import Button from '@mui/material/Button';
import Typography from '@mui/material/Typography';

const Body = (
    <Typography variant="body2">
        Understanding MapReduce:
        MapReduce is a programming model that enables parallel processing of massive datasets across a cluster of machines. It provides an abstraction layer that hides the complexities of distributed computing, allowing developers to focus on high-level data processing logic. The core idea behind MapReduce is dividing a large task into smaller, independent subtasks that can be processed in parallel, and then aggregating the results.

        Key Components of MapReduce:
        <ul>
            <li>
                1. Map Function:
                The map function processes a set of input data and generates a set of key-value pairs as intermediate outputs. It applies the same operation independently to each input element and produces intermediate results that are later combined in the reduce phase.
            </li>
            <li>
                2. Reduce Function:
                The reduce function takes the intermediate key-value pairs generated by the map phase and performs further processing to produce the final result. It groups together the values associated with each key and applies a specific operation or transformation to the grouped data.
            </li>
            <li>
                3. Input Data Splitting:
                The input data is split into smaller chunks, called input splits, to be processed independently by individual map tasks. This enables parallel processing by distributing the workload across the cluster.
            </li>
            <li>
                4. Data Shuffling and Sorting:
                In the shuffle and sort phase, the intermediate key-value pairs generated by the map tasks are partitioned and redistributed based on their keys. This step ensures that all values corresponding to the same key are sent to the same reduce task, enabling efficient data aggregation.
            </li>
            <li>
                5. Distributed Execution:
                The map and reduce tasks are distributed across the available nodes in the cluster. Each node processes its assigned portion of the data, and the results are combined to obtain the final output.
            </li>
        </ul>
        <ul>
            Benefits of MapReduce:
            <li>
                1. Scalability:
                MapReduce allows effortless scalability by distributing the processing workload across a cluster of machines. As the dataset grows, additional machines can be added to handle the increased processing requirements.
            </li>
            <li>
                2. Fault Tolerance:
                MapReduce provides fault tolerance by automatically handling node failures. If a node fails during processing, the framework redistributes the affected tasks to other available nodes, ensuring uninterrupted data processing.
            </li>
            <li>
                3. Simplified Programming Model:
                By abstracting away the complexities of distributed computing, MapReduce simplifies the development process. Developers can focus on expressing the data processing logic using the map and reduce functions, without worrying about low-level distributed computing intricacies.
            </li>
            <li>
                4. Flexibility:
                MapReduce is a flexible framework that can be used for various types of data processing tasks. It supports a wide range of applications, including data transformation, filtering, aggregation, and more.
            </li>
        </ul>
        <ul>
            Applications of MapReduce:
            MapReduce has been widely adopted across various industries for data-intensive applications:

            <li>
                1. Large-Scale Data Analysis:
                MapReduce enables efficient processing and analysis of massive datasets, making it valuable for tasks like log analysis, sentiment analysis, recommendation systems, and machine learning algorithms.
            </li>
            <li>
                2. Web Indexing and Search:
                Search engines utilize MapReduce to index and process web pages, extracting relevant information and building search indexes.
            </li>
            <li>
                3. Distributed Data Processing:
                MapReduce is commonly used for distributed processing tasks, such as ETL (Extract, Transform, Load) processes, data cleansing, and data integration across multiple sources.
            </li>
            <li>
                4. Social Network Analysis:
                MapReduce plays a significant role in analyzing social networks by processing large graphs and identifying patterns, communities, and influencers.
            </li>
        </ul>
        Conclusion:
        MapReduce has become a foundational framework for distributed data processing on large clusters. By simplifying the programming model and providing scalable and fault-tolerant execution, MapReduce has revolutionized the way big data is processed. Its versatility and wide range of applications make it an indispensable tool for organizations dealing with massive datasets. With MapReduce, data processing on large clusters has become more accessible, efficient, and capable of handling the challenges posed by big data analytics.
    </Typography>
);

export default function BasicCard() {
    const [learnMore, setLearnMore] = React.useState(false);

    return (
        <Card style={{ margin: '20px auto', padding:'10px 0', width: '80%' }}>
        <CardContent>
            <Typography sx={{ fontSize: 14 }} color="text.secondary" gutterBottom>
            </Typography>
            <Typography variant="h5" component="div">
                MapReduce: Simplified Data Processing on Large Clusters
            </Typography>
            <Typography sx={{ mb: 1.5 }} color="text.secondary">
                Introduction:
                In the era of big data, processing vast amounts of information efficiently and in a timely manner is a significant challenge. MapReduce, a programming model and framework introduced by Google, has revolutionized data processing on large clusters. This article explores the concept of MapReduce, its key components, and its role in simplifying distributed data processing.
            </Typography>
            {learnMore && Body}    
        </CardContent>
        <CardActions>
            <Button onClick={() => {setLearnMore(!learnMore)}} size="small">
                {!learnMore && 'Learn More'}
                {learnMore && 'Hide'}
            </Button>
        </CardActions>
        </Card>
    );
}